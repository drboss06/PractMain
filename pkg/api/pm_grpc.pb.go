// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: api/proto/pm.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PmService_GetGraph_FullMethodName = "/api.PmService/GetGraph"
)

// PmServiceClient is the client API for PmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PmServiceClient interface {
	GetGraph(ctx context.Context, in *GetGraphRequest, opts ...grpc.CallOption) (*GetGraphResponse, error)
}

type pmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPmServiceClient(cc grpc.ClientConnInterface) PmServiceClient {
	return &pmServiceClient{cc}
}

func (c *pmServiceClient) GetGraph(ctx context.Context, in *GetGraphRequest, opts ...grpc.CallOption) (*GetGraphResponse, error) {
	out := new(GetGraphResponse)
	err := c.cc.Invoke(ctx, PmService_GetGraph_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PmServiceServer is the server API for PmService service.
// All implementations must embed UnimplementedPmServiceServer
// for forward compatibility
type PmServiceServer interface {
	GetGraph(context.Context, *GetGraphRequest) (*GetGraphResponse, error)
	mustEmbedUnimplementedPmServiceServer()
}

// UnimplementedPmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPmServiceServer struct {
}

func (UnimplementedPmServiceServer) GetGraph(context.Context, *GetGraphRequest) (*GetGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGraph not implemented")
}
func (UnimplementedPmServiceServer) mustEmbedUnimplementedPmServiceServer() {}

// UnsafePmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PmServiceServer will
// result in compilation errors.
type UnsafePmServiceServer interface {
	mustEmbedUnimplementedPmServiceServer()
}

func RegisterPmServiceServer(s grpc.ServiceRegistrar, srv PmServiceServer) {
	s.RegisterService(&PmService_ServiceDesc, srv)
}

func _PmService_GetGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PmServiceServer).GetGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PmService_GetGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PmServiceServer).GetGraph(ctx, req.(*GetGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PmService_ServiceDesc is the grpc.ServiceDesc for PmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.PmService",
	HandlerType: (*PmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGraph",
			Handler:    _PmService_GetGraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/pm.proto",
}
