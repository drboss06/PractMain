// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: api/proto/adder.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Adder_CreateTeam_FullMethodName     = "/api.Adder/CreateTeam"
	Adder_ParseToken_FullMethodName     = "/api.Adder/ParseToken"
	Adder_SendMailToUser_FullMethodName = "/api.Adder/SendMailToUser"
	Adder_AddUserToTeam_FullMethodName  = "/api.Adder/AddUserToTeam"
)

// AdderClient is the client API for Adder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdderClient interface {
	CreateTeam(ctx context.Context, in *CreateNewTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error)
	ParseToken(ctx context.Context, in *AccessTokenRequest, opts ...grpc.CallOption) (*AccessTokenResponse, error)
	SendMailToUser(ctx context.Context, in *UserEmailRequest, opts ...grpc.CallOption) (*UserEmailResponse, error)
	AddUserToTeam(ctx context.Context, in *AddUserToTeamRequest, opts ...grpc.CallOption) (*AddUserToTeamResponse, error)
}

type adderClient struct {
	cc grpc.ClientConnInterface
}

func NewAdderClient(cc grpc.ClientConnInterface) AdderClient {
	return &adderClient{cc}
}

func (c *adderClient) CreateTeam(ctx context.Context, in *CreateNewTeamRequest, opts ...grpc.CallOption) (*CreateTeamResponse, error) {
	out := new(CreateTeamResponse)
	err := c.cc.Invoke(ctx, Adder_CreateTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adderClient) ParseToken(ctx context.Context, in *AccessTokenRequest, opts ...grpc.CallOption) (*AccessTokenResponse, error) {
	out := new(AccessTokenResponse)
	err := c.cc.Invoke(ctx, Adder_ParseToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adderClient) SendMailToUser(ctx context.Context, in *UserEmailRequest, opts ...grpc.CallOption) (*UserEmailResponse, error) {
	out := new(UserEmailResponse)
	err := c.cc.Invoke(ctx, Adder_SendMailToUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adderClient) AddUserToTeam(ctx context.Context, in *AddUserToTeamRequest, opts ...grpc.CallOption) (*AddUserToTeamResponse, error) {
	out := new(AddUserToTeamResponse)
	err := c.cc.Invoke(ctx, Adder_AddUserToTeam_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdderServer is the server API for Adder service.
// All implementations must embed UnimplementedAdderServer
// for forward compatibility
type AdderServer interface {
	CreateTeam(context.Context, *CreateNewTeamRequest) (*CreateTeamResponse, error)
	ParseToken(context.Context, *AccessTokenRequest) (*AccessTokenResponse, error)
	SendMailToUser(context.Context, *UserEmailRequest) (*UserEmailResponse, error)
	AddUserToTeam(context.Context, *AddUserToTeamRequest) (*AddUserToTeamResponse, error)
	mustEmbedUnimplementedAdderServer()
}

// UnimplementedAdderServer must be embedded to have forward compatible implementations.
type UnimplementedAdderServer struct {
}

func (UnimplementedAdderServer) CreateTeam(context.Context, *CreateNewTeamRequest) (*CreateTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (UnimplementedAdderServer) ParseToken(context.Context, *AccessTokenRequest) (*AccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseToken not implemented")
}
func (UnimplementedAdderServer) SendMailToUser(context.Context, *UserEmailRequest) (*UserEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMailToUser not implemented")
}
func (UnimplementedAdderServer) AddUserToTeam(context.Context, *AddUserToTeamRequest) (*AddUserToTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToTeam not implemented")
}
func (UnimplementedAdderServer) mustEmbedUnimplementedAdderServer() {}

// UnsafeAdderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdderServer will
// result in compilation errors.
type UnsafeAdderServer interface {
	mustEmbedUnimplementedAdderServer()
}

func RegisterAdderServer(s grpc.ServiceRegistrar, srv AdderServer) {
	s.RegisterService(&Adder_ServiceDesc, srv)
}

func _Adder_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNewTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdderServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adder_CreateTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdderServer).CreateTeam(ctx, req.(*CreateNewTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adder_ParseToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdderServer).ParseToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adder_ParseToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdderServer).ParseToken(ctx, req.(*AccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adder_SendMailToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdderServer).SendMailToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adder_SendMailToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdderServer).SendMailToUser(ctx, req.(*UserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adder_AddUserToTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdderServer).AddUserToTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adder_AddUserToTeam_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdderServer).AddUserToTeam(ctx, req.(*AddUserToTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Adder_ServiceDesc is the grpc.ServiceDesc for Adder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Adder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Adder",
	HandlerType: (*AdderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTeam",
			Handler:    _Adder_CreateTeam_Handler,
		},
		{
			MethodName: "ParseToken",
			Handler:    _Adder_ParseToken_Handler,
		},
		{
			MethodName: "SendMailToUser",
			Handler:    _Adder_SendMailToUser_Handler,
		},
		{
			MethodName: "AddUserToTeam",
			Handler:    _Adder_AddUserToTeam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/adder.proto",
}
